// Code generated by MockGen. DO NOT EDIT.
// Source: jobhelper.go

// Package jobHelper is a generated GoMock package.
package jobHelper

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	v1 "k8s.io/api/batch/v1"
)

// MockJobHelper is a mock of JobHelper interface.
type MockJobHelper struct {
	ctrl     *gomock.Controller
	recorder *MockJobHelperMockRecorder
}

// MockJobHelperMockRecorder is the mock recorder for MockJobHelper.
type MockJobHelperMockRecorder struct {
	mock *MockJobHelper
}

// NewMockJobHelper creates a new mock instance.
func NewMockJobHelper(ctrl *gomock.Controller) *MockJobHelper {
	mock := &MockJobHelper{ctrl: ctrl}
	mock.recorder = &MockJobHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobHelper) EXPECT() *MockJobHelperMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockJobHelper) CreateJob(ctx context.Context, jobTemplate *v1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, jobTemplate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobHelperMockRecorder) CreateJob(ctx, jobTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJobHelper)(nil).CreateJob), ctx, jobTemplate)
}

// DeleteJob mocks base method.
func (m *MockJobHelper) DeleteJob(ctx context.Context, job *v1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockJobHelperMockRecorder) DeleteJob(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockJobHelper)(nil).DeleteJob), ctx, job)
}

// GetJob mocks base method.
func (m *MockJobHelper) GetJob(ctx context.Context, namespace, jobType string, labels map[string]string) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, namespace, jobType, labels)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJobHelperMockRecorder) GetJob(ctx, namespace, jobType, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJobHelper)(nil).GetJob), ctx, namespace, jobType, labels)
}

// GetJobStatus mocks base method.
func (m *MockJobHelper) GetJobStatus(job *v1.Job) (Status, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStatus", job)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobStatus indicates an expected call of GetJobStatus.
func (mr *MockJobHelperMockRecorder) GetJobStatus(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStatus", reflect.TypeOf((*MockJobHelper)(nil).GetJobStatus), job)
}

// IsJobChanged mocks base method.
func (m *MockJobHelper) IsJobChanged(existingJob, newJob *v1.Job) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobChanged", existingJob, newJob)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJobChanged indicates an expected call of IsJobChanged.
func (mr *MockJobHelperMockRecorder) IsJobChanged(existingJob, newJob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobChanged", reflect.TypeOf((*MockJobHelper)(nil).IsJobChanged), existingJob, newJob)
}

// JobLabels mocks base method.
func (m *MockJobHelper) JobLabels(mod v1beta1.Module, targetKernel, jobType string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobLabels", mod, targetKernel, jobType)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// JobLabels indicates an expected call of JobLabels.
func (mr *MockJobHelperMockRecorder) JobLabels(mod, targetKernel, jobType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobLabels", reflect.TypeOf((*MockJobHelper)(nil).JobLabels), mod, targetKernel, jobType)
}
